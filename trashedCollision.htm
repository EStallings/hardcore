<html><head><meta charset="UTF-8"><style>*{position:absolute;margin:0px;}</style></head><body><script src='util.js'></script><script>
with((D=document).body.appendChild(W=D.createElement("canvas")).getContext("2d"))with(Math){
(onresize=e=>{W.width=ww=innerWidth;W.height=wh=innerHeight;})();

//==  USER DEFINABLES  =======================================================//

var updateInterval    = 1000;
var animationInterval = 100;

var gw = 10;
var gh = 10;

var renderScale = 64;

//==  JS UTILS  ==============================================================//

var clamp = (i,n,x) => min(max(i,n),x);

var rgb = (r,g,b,a) => fillStyle=strokeStyle=shadowColor=`rgba(${~~(255*r)},${~~(255*g)},${~~(255*b)},${a===0?0:a||1})`;
var pushPop = f => { save(); f(); restore(); };
var fillCircle = (x,y,r) => { beginPath(); arc(x,y,r,0,2*PI); fill(); }

//==  GAME UTILS  ============================================================//

animationInterval = min(updateInterval,animationInterval);
var updateTick = performance.now();

var NONE  = 0;
var NORTH = 1;
var SOUTH = 2;
var EAST  = 3;
var WEST  = 4;

var dirSwitch = (d,x,n,s,e,w) => {
	switch(d){
		case NONE : x(); break;
		case NORTH: n(); break;
		case SOUTH: s(); break;
		case EAST : e(); break;
		case WEST : w(); break;
	}
};

function gridify () {
	var retVal = [];
	for (var i=0;i<gw;++i) {
		retVal[i] = [];
		for (var j=0;j<gh;++j) retVal[i][j] = undefined;
	} return retVal;
}

//==  GAME FUNCS  ============================================================//

var throng = [];
function person (x,y) {
	throng.push(this);
	this.x = x; this.newX = x;
	this.y = y; this.newY = y;

	this.pendingDir = NONE;
	this.activeDir  = NONE;
}

var processThrong =_=>{
	throng.sort(_=>random()-0.5); // randomize update list
	throng.map(i=>{
		i.activeDir = i.pendingDir;
		i.pendingDir = NONE;
		i.newX = i.x;
		i.newY = i.y;
		dirSwitch(i.activeDir,_=>0,
			_=>{--i.newY;if(i.newY< 0 ){i.newY=   0;i.activeDir=NONE}},
			_=>{++i.newY;if(i.newY>=gh){i.newY=gh-1;i.activeDir=NONE}},
			_=>{--i.newX;if(i.newX< 0 ){i.newX=   0;i.activeDir=NONE}},
			_=>{++i.newX;if(i.newX>=gw){i.newX=gw-1;i.activeDir=NONE}});
	});
	throng.sort((a,b)=>a.activeDir===NONE?-1:1); // bring non-moving persons to front
	var newGrid = new gridify();
	throng.map(i=>{
		if(!newGrid[i.newX][i.newY]){
			newGrid[i.newX][i.newY]=i;
			i.x = i.newX;
			i.y = i.newY;
		} else i.activeDir=NONE;
	});

	throng.map(i=>i.pendingDir=~~(random()*5));
};

//==  TESTING  ===============================================================//

var testPerson = new person(0,0);
for (var i=0;i<20;++i) new person(~~(random()*(gw-2))+1,~~(random()*(gh-2))+1);

onkeydown = e => {
	switch(e.keyCode){
		case 87: testPerson.pendingDir = NORTH; break; // W
		case 65: testPerson.pendingDir = EAST;  break; // A
		case 83: testPerson.pendingDir = SOUTH; break; // S
		case 68: testPerson.pendingDir = WEST;  break; // D
	}
}

//==  MAIN LOOP  =============================================================//

var tick=performance.now(),prevTick=tick;
(loop=_=>pushPop(_=>{requestAnimationFrame(loop);prevTick=tick;tick=performance.now();clearRect(0,0,ww,wh);

	if (tick%updateInterval<prevTick%updateInterval) {
		updateTick = tick;
		processThrong();
	}

	translate(ww/2,wh/2);

	pushPop(_=>{
		scale(renderScale,renderScale);
		translate(-gw/2,-gh/2);
		translate(0.5,0.5);

		rgb(0,0,0,0.3);

		for(var i=0;i<gw;++i)for(var j=0;j<gh;++j)
			fillCircle(i,j,0.05);

		var progress = clamp((tick-updateTick)/animationInterval,0,1);
		var invP = 1-progress;
		throng.map(i=>dirSwitch(i.activeDir,
			_=>fillCircle(i.x,i.y,0.5),
			_=>fillCircle(i.x,i.y+invP,0.5),
			_=>fillCircle(i.x,i.y-invP,0.5),
			_=>fillCircle(i.x+invP,i.y,0.5),
			_=>fillCircle(i.x-invP,i.y,0.5)
		));
	});
}))();

}</script></body></html>























































